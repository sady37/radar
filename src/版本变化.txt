
本radar项目是基于 Vue 3 构建的 2D 画布系统，用于对象布局、交互控制、雷达信号可视化。该系统支持固定物体、移动物体、雷达对象的拖拽、旋转、属性编辑、信号区域显示，
并包含完整的工具栏、编辑菜单、坐标系统及坐标转换。将固定物体的坐标转换为雷达自身坐标回传给真实雷达，接收真实雷达的人体数据并展示。

技术架构   技术说明
Vue 3 + TypeScript  组件化架构，确保可维护性
Vue Router          处理不同视图的切换
Vuex                状态管理，存储对象信息
SCSS (dart-sass)    预处理样式，提升 UI 设计灵活性

✅ 采用 Prettier 代码格式化，符合 Lint 规则
✅ 工具栏、编辑菜单均符合 Vue 组件结构化开发

src/
├── components/
├── components/
│   ├── common/              # 保留但目前为空
│   ├── monitoring/          # 监控相关组件
│   │   ├── PostureIndicator.vue  #人体姿态：
│   │   ├── TrajectoryLine.vue  #移动物体轨迹线，本项目暂不实现
│   │   └── VitalsDisplay.vue  #人的生理指标显示
│   ├── RadarCanvas.vue     # 主画布组件
│   └── RadarToolbar.vue    # 工具栏组件
├── stores/                 # 状态管理
│   ├── canvas.ts           #画布设置，width,Hight
│   ├── mouse.ts            #mouse相关
│   ├── objects.ts          #最初的各对像数据
│   ├── radarData.ts        # 存放真实雷达传送过的多人的数据:坐标、姿态、生理指标等
│   └── types.ts            #对象属性定义
│
└── utils/                 # 工具函数
	├── drawRadar.ts       # 绘制雷达
	├── radarUtils.ts       #计算雷达的边界，回传边界内的固定物体4点坐标，不传Wall
	├── postureIcons.ts    # 人体姿态SVG图标定义集合，纯数据/常量文件
	├── drawPosture.ts     # 人体绘制主函数(包含姿态图标和默认椭圆)
	├── mockRadarData.ts   # 模拟人体数据生成         
	└── trajectoryUtils.ts # 绘制运动物体轨迹


当前已完成画布、toolbar等组件，画布坐标、对象创建、移动、旋转、改变大小，雷达模型绘制；人体模板、人体模拟数据框架已完成，但未应用。
现需要画布固定对象上显示name label

===============

###v1.0
完成画布和Toolbar的框架
Canvas 600*500px 坐标，刻度，放大key 
spacer 5*500px 
toolbar 150*500px  图样，对像编辑区，控制区  

###v1.1
	因toolbar高度不足，修改空间，宽+40，高度+20
	Canvas 620*520px 坐标，刻度，放大key ,逻辑单元 620*520
	spacer 10*520px 
	toolbar 170*520px  图样，对像编辑区，控制区  


###V1.2
只把Toolbar中
改为Ceiling Rec.Hight 改为Ceiling H200-300cm
wall Rec.Hight 改为Wall H150-180cm
1.测试验证store数据功能
	RadarToolbar中连接store并实现模式切换的逻辑
2.	数据可以存储到Store
	数据结构正确
	Store的actions可以执行
	如果需验证用户输入值是否正确传到Store，建议修改TestStore增加输入框：
1/2 已完成此部验证



###V1.3
	处理Toolbar的输入和Store的绑定
	清Ll许多地方默认的单位由cm改为dm分米，本Vue单位全部采用逻辑单位 1逻辑单位=1cm, for example ,radar hight 150-330
	Ceiling Rec. height 改为 Ceiling default H280cm
	Wall Rec. height  改为  Wall default H150cm
	雷达高度限制 150~330，精度10，Ceiling default Hight 280,Wall default Hight 150
	door默认L90*W30
	bed默认L190*W90
	Exclude默认L100*W50
	Other默认L50*W50
    v1.3.0
	--解决显示，默认值，去除输入框后方的方向键头
    v1.3.1
	--解决雷达 Ceiling/Wall 模认值显示
	--解决雷达 Ceiling/Wall Hight 输入校验，输入值[150-330],精度10。
	  低于150，自动=150，高于330，自动=330，自动取整。

	3.接下来将RadarToolbar连接到Store。需要：
 	--修改对象创建逻辑  完成
	--连接雷达属性到Store   
	--属性值双向绑定         

根据你的描述,建议继续以下验证:

确认从TestStore修改Store中的雷达属性时,RadarToolbar中的对应属性也能正确更新。这可以验证双向绑定的另一方向。
检查Store中的雷达高度等属性的值是否符合检验逻辑。输入无效值后,Store中的对应属性不应被更新。
修复TestStore组件,确保它修改Store数据后,自身UI也能正确更新,同时不影响其他组件如RadarToolbar的显示和功能。
考虑添加更多测试用例,覆盖各种正常和异常情况,以全面验证Store的同步逻辑。

   v1.3.2
    * 测试其他雷达属性(rotation, boundary等)与Store的连接
	* 完成剩余属性的双向绑定
	* 处理属性变更事件
   canvas.vue toolbar.vue  完成雷达高度，rotation 验证
   v1.3.3
	删除store测试代码并修复L/W的输入故障

###V1.4
	1.点击moudule sample 来选择module，设置object properties, 点击set在canvas中心创建对像，并保持创
	建的对象为选择的对象，方便改变属情，如radar show boundary on/off
	2.解决输入的值不可见，使属性框中的值=经校验更正过的输入值

###V1.5
	1.Implement click object detection in Canvas
	2.Update Toolbar UI when object selected
	3.Enable property editing for selected object

   boundary only的Other/ radar，不受碰撞规则约束
   radar 可与其它固定或移动物体重叠，且处于显示的最上层

   确认修改并总结当前工作流程：

新建对象时调用 push 添加到数组
创建后取消选中状态
用户需手动点击选中对象
选中后可移动、旋转或编辑属性

这样既保持了数据一致性，也提供了更清晰的用户操作流程。
object.ts仍保持不变。

重大改变
解决方案3：在现在基础上，分离create/edit功能，在set,delete 变成3个按钮：create/set/del
选中模板，弹出对象属情，编辑属性，点击create，选中对象清空，创建新对像，新对象select为unlock状态，后续可直接移动编辑.
左健空白处取消选中，点击选中，选中后，edit变绿色，delete变红色，表示可编辑可删除。

####v1.6
 -1.6.1
  move and roll, name  object  
 -1.6.2
  显示坐标，没有选中对象时，使用mouse的坐标，选中对像时，显示对像坐标。
  有偏差
  雷达坐标为其圆心，其它固体对像是矩形，（右上，左上，右下，左上），在坐标区显示矩形右上坐标。
  -1.6.3
  增加mouse move object

###v1.7
  -v1.7.1
   更新画布及雷达坐标，顶部中心为原点，X 左+右负，上-下+
  -v1.7.2
   原来对像区的lock及对象属性显示取消。在工具栏方向键整体划分为为两例，左例50，方向例整体右移，左列新增两个3的显示控制：从上向下，Lock,显示刻度，显示网格; 右列为方向健
  -V1.7.3
  取消property-area的lock-toggle，type-label
  实现lock,show scale, show gird

###v1.8
--v1.8.1 
		template-area的所有固定物体(矩形)对像有以下属性并保存,以供后期使用雷达作标传给真实雷达使用：
		Type-value	type-name	sharp						color						矩形4个点坐标		 		
				
		1			Other		Rectangle(L50W50)			Gray #d3d3d3			 v1(-,-),v2(+,-),v3(-,+),v4(+,+)				
		2			bed			Rectangle(L190*W90)			gray-blue #0cade3		 (-,-)(+,-)(-,+)(+,+)					
		3			exclude		Rectangle(L50W50)			light-Gray #d3d3d3		 (-,-)(+,-)(-,+)(+,+)					
		4			door		Rectangle(L90W30)			Gray-green #a0eda0		 (-,-)(+,-)(-,+)(+,+)					
		5			monitorBed	Rectangle(L190W90)			Gray-orage #D2B280		 (-,-)(+,-)(-,+)(+,+)					

        2
		将M改成：   Person
		10			M		Ellipse(a40b10),上顶点红	   Gray-orage#ADABA1    	   圆心

		template-area  property-area

		Radar自身坐标与画布相同，X 左+右负，Y上-下+，原点在圆心，Y轴向下。 
		radar新增boundary设置，  左边界：+x(画布左侧),右边界-x(画布左侧), 上边界：-y(画布上侧),下边距+y(画布下侧)
		Ceiling: 以radar原心为矩形中心， 
		wall:以radar原心为矩形上边框的中心,，上边界-y恒等0
		雷达默认状态（初始状态）：
		Copy- 原点：雷达圆心
		- X轴：左负(-)右正(+)，与画布X轴相同
		- Y轴：上负(-)下正(+)，与画布Y轴相同
		- 方向指示：白色小长方形(4:1)指向Y轴正方向(下)
		旋转规则：
		旋转时整个坐标系跟随旋转
		旋转角度顺时针为正，与画布相同
		这样雷达的坐标系就是画布坐标系的平移，更容易理解和计算。
		#0f85df  15, 133, 223          ctx.strokeStyle = 'rgba(10, 91, 135, 0.9)'

		// 方向指示器：钝120三角形，顶点用白色

		1. 原代码考虑了缩放，bounds.x[0] * scale.value,
		2. 仍为固定边界，未考虑在toolbar show boudary行上增加2行输入框：
		   第1行left:[10-300]      right:[10-300]  
		   第2行front:{ceiling[10,200] ,wall[30-400]}   rear:{ceiling[10,200],wall[0]}
		 输入精度10

		 ###v1.9
			解决坐标冲空，边界画的卡顿，更新雷达方向指示器
			 房间坐标系（全局视角）：

			站在房间外看屏幕：
			- 左侧是X负方向（-）
			- 右侧是X正方向（+）
			- 上方是Y正方向（+）
			- 下方是Y负方向（-）
			这符合我们直观看屏幕的习惯

			雷达坐标系（局部视角）：

			Wall模式：
			- 雷达圆面正对观察者
			- LED指示灯在上方，表示Y+朝天
			- 圆心为原点
			- 左右方向（X轴）与房间一致：左负右正
			- 上下方向（Y轴）：上正下负

			Ceiling模式：
			- 雷达圆面朝下
			- 坐标系与房间Y不致：
			  * X轴：左负(-)右正(+) 与房间X相同
			  * Y轴：上负(-)下正(+) 与房间Y相反
			- LED默认指向屏幕下方（观察者看房间的前方）
			- 在2D表现时，LED（绿色小长方形）指向下方

			Wall时坐标系都与房间一致，ceiling Y相反
			区别只在于安装位置和LED方向
			有利于统一边界的设置和显示

	

########v1.9####
    代码拆分，重做画布坐标，雷达坐标区分wall/ceiling 两种
    后期v3.0时发现太复杂，已删除
	----画布及雷达坐标及图样
			 房间坐标系（全局视角）：

			站在房间外看屏幕：
			- 左侧是X负方向（-）
			- 右侧是X正方向（+）
			- 上方是Y正方向（+）
			- 下方是Y负方向（-）
			这符合我们直观看屏幕的习惯

			雷达坐标系（局部视角）：

			Wall模式：
			- 雷达圆面正对观察者
			- LED指示灯在上方，表示Y+朝天
			- 圆心为原点
			- 左右方向（X轴）与房间一致：左负右正
			- 上下方向（Y轴）：上正下负

			Ceiling模式：
			- 雷达圆面朝下
			- 坐标系与房间Y不致：
			  * H轴：左负(-)右正(+) 与房间X相同
			  * V轴：上负(-)下正(+) 与房间Y相反
			- LED默认指向屏幕下方（观察者看房间的前方）
			- 在2D表现时，LED（绿色小长方形）指向下方
		

					我已经更新了雷达图，主要改进包括：


			LED指示器：
			Wall模式：LED在上方（Y+）
			Ceiling模式：LED在下方,（指向观察者前方）
			使用绿色小矩形表示，便于识别


			视觉优化：
			字体显示：
			
			C/W字体大小到32pt
			加粗处理增加可读性
			与指示器保持更大间距
			C/W标识清晰可见


			保持浅色配色方案：
			外圈：浅蓝 #bee3f8
			中圈：中蓝 #63b3ed
			内圈：深蓝 #3182ce


			布局优化：
			增加了整体SVG的高度以容纳更大的字体
			保持雷达图本身在25px范围内
			指示器保持与中圈同宽
			ctx.rect(-15 * scale,  // 左边起点，当前是15，与外圆半径相同
         	(indicatorY - 3) * scale,  // 垂直位置
         	30 * scale,   // 宽度，当前是30（-15到+15）
         	6 * scale)    // 高度

####V2.0
	重构代码
	定义模板数据接口，方便未来与真实雷达通讯, 一些固定物体使用矩形，移动物体，表示人或更多，非矩形，如椭圆或自定义的

		Type-value	type-name	sharp						color					  矩形坐标(V1左上角，V2右上角，v3右下角，v4左下角)	  其它状态	 		
				
		1			Other		Rectangle(L50W50)			Gray #d3d3d3			 v1(-,-),v2(+,-),v3(-,+),v4(+,+)				    
		2			bed			Rectangle(L190*W90)			gray-blue #0cade3		 v1(-,-),v2(+,-),v3(-,+),v4(+,+)					2/5可互转					
		3			exclude		Rectangle(L50W50)			light-Gray #d3d3d3		 v1(-,-),v2(+,-),v3(-,+),v4(+,+)					
		4			door		Rectangle(L90W30)			Gray-green #a0eda0		 v1(-,-),v2(+,-),v3(-,+),v4(+,+)					
		5			monitorBed	Rectangle(L190W90)			Gray-orage #D2B280		 v1(-,-),v2(+,-),v3(-,+),v4(+,+)
		1			Wall		Rectangle(L200W5)			Gray #d3d3d3			 v1(-,-),v2(+,-),v3(-,+),v4(+,+)	
		3			TV   		Rectangle(L50W50)			light-Gray #d3d3d3		 v1(-,-),v2(+,-),v3(-,+),v4(+,+)	
	
		10			person		Ellipse(a40b10),上顶点红	Gray-orage#ADABA1    	   圆心/时间(用于轨迹)								身体姿态，生理指标
						
		人体姿态：
		0: 初始化 1: 行走 2: 疑似跌倒 3: 蹲坐 4: 站立 5：跌倒确认 6: 躺卧
		呼吸心率
	###v2.1
	首先用云云对接，定义接口，框架，无报错
	未修改canvas,toolbar
	
	好的。现在我们已经完成：

	数据结构定义：
		PersonData, VitalSignData 接口
		PersonEvent, SleepState 枚举
	数据模拟服务：
		MockRadarService 实现
		模拟数据生成逻辑
		定时更新机制

	状态管理：
	RadarDataStore 存储当前数据状态
		后续工作建议：

	在 RadarCanvas 中实现实时人员绘制
	添加不同姿态的图标显示
	实现告警状态的视觉反馈



#2.2 原来的版本，坐标定义OK，但代码错
	在2.1基础上:画布坐标更新,将刻度固定在四边,随Scale缩放自动变动坐标显示的移动、网络线,
  		实现对象、mouse统一转换为画布坐标,解决mouse选取对象错
	2.2新增重制雷达自身坐标H/V,并更新图样的坐标显示

			计算机默认坐标系:
			原点(0,0)在画布左上角
			X轴向右为正
			Y轴向下为正

			画布原点移至顶部中心，
			X轴：向右为正（保持不变）
			Y轴：向下为正（保持计算机默认方向）

			雷达坐标系（局部视角）：不使用X/Y/Z, 采用水平H/V垂直

			在雷达信号的描述中，HFOV（水平视场）和VFOV（垂直视场）通常是指雷达波束在水平和垂直方向上的覆盖范围。定义H/F坐标时，通常会根据雷达的坐标系来确定视角。
			对于H坐标，常见的做法是将雷达的发送面（或者雷达波束的前进方向）对准观察者的位置。在这种情况下，雷达的H坐标通常定义为：
			H+：通常对应于雷达波束在水平面上朝向“右”的方向。  
			H-：通常对应于雷达波束在水平面上朝向“左”的方向。
			对于VFOV，雷达的V坐标定义为：
			V+：通常是雷达波束在垂直方向上向上指的方向。
			V-：通常是雷达波束在垂直方向上向下指的方向。

			ceiling 模式：
			H轴：向左为正(+)，向右为负(-)
			V轴：向下为正(+)，向上为负(-)
			LED指示器在下方


			wall 模式：
			H轴：向左为正(+)，向右为负(-)
			V轴：向下为正(+)，向上为负(-)
			LED指示器在上方

			Wall/Ceiling时坐标系：
			 H轴都与X轴相反，H=-X
			 V轴：ceiling: v=Y, Wall:V=Y
				
			区别只在于安装位置和LED方向，有利于统一边界的设置和显示


		// 现在的代码实现了：
		- 画布显示一个房间的俯视图
		- 坐标原点在顶部中心
		- 缩放时保持原点位置不变
		- Y轴向下为正，符合直觉

###3.0
	重构数据结构，固定物体及雷达 统一用 type.ts ObjectProperties{}
	原因：对象
	person: 仍然在type.ts 中单独定义，因为其涉及实时数据
	删除radar.ts, 绘制对像的逻辑仍然直接放到RadarCanvas.vue drawObject(),因为对像少。
	
	考虑到：

	人体绘制需要同时涉及 姿态图标(postureIcons.ts) 和 默认椭圆(drawPerson.ts)
	轨迹绘制(trajectoryUtils.ts) 也需要与人体位置关联
	RadarCanvas.vue 需要统一管理所有绘制

	建议在 RadarCanvas.vue 中保留 drawPersons 作为统一入口：
	carvar.vue 使用drawPerson（），作为人体绘制的统一入口  ，drawPerson再调trajectoryUtils和drawPosture
	utils/
	├── drawRadar.ts       # 绘制雷达
	├── radarUtils.ts       #计算雷达的边界，回传边界内的固定物体4点坐标，不传Wall
	├── postureIcons.ts    # 人体姿态SVG图标定义集合，纯数据/常量文件
	├── drawPosture.ts     # 人体绘制主函数(包含姿态图标和默认椭圆)
	├── mockRadarData.ts   # 模拟人体数据生成         
	└── trajectoryUtils.ts # 绘制运动物体轨迹
  ###3.1
  输出指定边界内的固定物体坐标，不含Wall
  设置举例：ceiling检测边界为X轴±300，Y轴±200，则传输格式为：{-300,-200; 300,-200; -300,200; 300,200}
  设置举例：侧装检测边界为X轴±300，Y轴0-400，则传输格式为：{-300,0; 300,0; -300,400; 300,400}

  ###3.2
  解决toolbox内部UI逻辑：
     点击template模板时，selectObjectType清除活动对像，重置对像属性为默认值，同时更新ObjectName输入框和isLocked开关
	 点击create键：createObject创建对像后，取消所有选中，重置对像属性为默认值，同时更新ObjectName输入框和isLocked开关
	 点击set键, 设置对像值，取消对像及模板选中
  解决canvas对像传递到toolbar,toolbar watch(selectedId),同步属性及ObjectNmae框及isLocked开关

  ###3.3
	保留现有的画布坐标计算（用于布局）
	添加雷达坐标系转换函数
	确保顶点顺序符合雷达标准
	实现完整的双坐标系报告(方便后期替换雷达)

		/**
		 * 计算物体相对于雷达坐标系的顶点坐标
		 * 雷达坐标系规则：
		 * - 原点在雷达中心 (0,0)
		 * - H轴：向左为正(+)，向右为负(-)
		 * - V轴：向下为正(+)，向上为负(-)
		 * 
		 * 顶点顺序规则 (v1,v2,v3,v4)：
		 * 默认ceiling模式 (H+向左, V+向下):
		 * - v1: 首选minH，minv
		 * - v2: 
		 * - v3: minV，minH
		 * - v4: 剩余点
		 * 
		 * 当雷达旋转后，坐标系跟随旋转，顶点定义规则保持不变
		 * 即：v1始终是雷达当前坐标系下的最高H+最大V+点
		 * 
		 * @param obj - 物体属性，包含画布坐标(x,y)
		 * @param radar - 雷达属性，包含画布坐标和旋转角度
		 * @returns - 返回在雷达坐标系中的顶点数组[(h,v)]
		 */

		 画布坐标：顺时针左上角开始，左上-右上-右下-左下
         雷达坐标： v1：优先找最小的 h，若 h 相同则找最小的 v。
					v2：优先找最小的 v，若 v 相同则找次小的 h。
					v3：最小的 h 中次小的 v。
					v4：剩下的那个点。

###3.4
	将房间布局导出单独隔离出来，增加房间/雷达的导入/出按钮
	去掉Set,直接修改并保存生效，所见即所得,使用watch()
	解决一些bug: 点击画布空白处，取消选中对象，但toolbar没有取消
			Canvas点击空白处 
		-> objectsStore.selectObject(null) 
		-> store.selectedId 变为 null 
		-> 触发 Toolbar 的 watch 
		-> 重置 Toolbar UI状态