边界极限测试
interface Point { x: number; y: number; }
interface ObjectProperties {
  mode: "ceiling" | "wall";
  position: Point;
  rotation: number;
  length: number;
  width: number;
  ceiling?: {
    boundary: {
      leftH: number;
      rightH: number;
      frontV: number;
      rearV: number;
    }
  };
  wall?: {
    boundary: {
      leftH: number;
      rightH: number;
      frontV: number;
      rearV: number;
    }
  };
}

// 判断点是否在边界内
function isPointInBoundary(point: Point, radar: ObjectProperties): boolean {
  const mode = radar.mode;
  const modeConfig = mode === 'ceiling' ? radar.ceiling! : radar.wall!;
  const boundary = modeConfig.boundary;
  
  if (mode === 'ceiling') {
    return (
      point.x >= -boundary.leftH && 
      point.x <= boundary.rightH && 
      point.y >= -boundary.frontV && 
      point.y <= boundary.rearV
    );
  } else {
    return (
      point.x >= -boundary.leftH && 
      point.x <= boundary.rightH && 
      point.y >= 0 && 
      point.y <= boundary.frontV
    );
  }
}

// 创建测试雷达 - Ceiling模式
const ceilingRadar: ObjectProperties = {
  mode: "ceiling",
  position: { x: 0, y: 0 },
  rotation: 0,
  length: 20,
  width: 20,
  ceiling: {
    boundary: {
      leftH: 300,
      rightH: 300,
      frontV: 200,
      rearV: 200
    }
  }
};

// 创建测试雷达 - Wall模式
const wallRadar: ObjectProperties = {
  mode: "wall",
  position: { x: 0, y: 0 },
  rotation: 0,
  length: 20,
  width: 20,
  wall: {
    boundary: {
      leftH: 300,
      rightH: 300,
      frontV: 400,
      rearV: 0
    }
  }
};

// 1. 测试边界点
console.log("=== 1. 边界点测试 ===");

const testBoundaryPoints = (radar: ObjectProperties) => {
  const points = [
    // 边界顶点
    { x: -radar.ceiling!.boundary.leftH, y: -radar.ceiling!.boundary.frontV },  // 左上
    { x: radar.ceiling!.boundary.rightH, y: -radar.ceiling!.boundary.frontV },  // 右上
    { x: -radar.ceiling!.boundary.leftH, y: radar.ceiling!.boundary.rearV },   // 左下
    { x: radar.ceiling!.boundary.rightH, y: radar.ceiling!.boundary.rearV },   // 右下
    
    // 边界上的点
    { x: 0, y: -radar.ceiling!.boundary.frontV },  // 上中点
    { x: 0, y: radar.ceiling!.boundary.rearV },    // 下中点
    { x: -radar.ceiling!.boundary.leftH, y: 0 },   // 左中点
    { x: radar.ceiling!.boundary.rightH, y: 0 },   // 右中点
    
    // 边界外的点
    { x: -radar.ceiling!.boundary.leftH - 1, y: 0 },   // 左边界外
    { x: radar.ceiling!.boundary.rightH + 1, y: 0 },   // 右边界外
    { x: 0, y: -radar.ceiling!.boundary.frontV - 1 },  // 上边界外
    { x: 0, y: radar.ceiling!.boundary.rearV + 1 }     // 下边界外
  ];

  points.forEach((point, index) => {
    console.log(
      `Point ${index}: (${point.x}, ${point.y}) - ${
        isPointInBoundary(point, radar) ? "在边界内" : "在边界外"
      }`
    );
  });
};

console.log("\nCeiling Mode 边界点测试:");
testBoundaryPoints(ceilingRadar);

// 2. 测试极限值
console.log("\n=== 2. 极限值测试 ===");
const extremePoints = [
  { x: -300, y: -200 },  // 左上角
  { x: 300, y: -200 },   // 右上角
  { x: -300, y: 200 },   // 左下角
  { x: 300, y: 200 },    // 右下角
  { x: -300.001, y: 0 }, // 刚好超出左边界
  { x: 300.001, y: 0 },  // 刚好超出右边界
  { x: 0, y: -200.001 }, // 刚好超出上边界
  { x: 0, y: 200.001 }   // 刚好超出下边界
];

extremePoints.forEach((point, index) => {
  console.log(
    `Extreme Point ${index}: (${point.x}, ${point.y}) - ${
      isPointInBoundary(point, ceilingRadar) ? "在边界内" : "在边界外"
    }`
  );
});

// 3. 测试特殊值
console.log("\n=== 3. 特殊值测试 ===");
const specialPoints = [
  { x: 0, y: 0 },        // 原点
  { x: Infinity, y: 0 }, // 无穷大
  { x: -Infinity, y: 0 },// 负无穷大
  { x: NaN, y: 0 },      // NaN
  { x: 0, y: NaN }       // NaN
];

specialPoints.forEach((point, index) => {
  console.log(
    `Special Point ${index}: (${point.x}, ${point.y}) - ${
      isPointInBoundary(point, ceilingRadar) ? "在边界内" : "在边界外"
    }`
  );
});

Result

=== 1. 边界点测试 ===

Ceiling Mode 边界点测试:
Point 0: (-300, -200) - 在边界内
Point 1: (300, -200) - 在边界内
Point 2: (-300, 200) - 在边界内
Point 3: (300, 200) - 在边界内
Point 4: (0, -200) - 在边界内
Point 5: (0, 200) - 在边界内
Point 6: (-300, 0) - 在边界内
Point 7: (300, 0) - 在边界内
Point 8: (-301, 0) - 在边界外
Point 9: (301, 0) - 在边界外
Point 10: (0, -201) - 在边界外
Point 11: (0, 201) - 在边界外

=== 2. 极限值测试 ===
Extreme Point 0: (-300, -200) - 在边界内
Extreme Point 1: (300, -200) - 在边界内
Extreme Point 2: (-300, 200) - 在边界内
Extreme Point 3: (300, 200) - 在边界内
Extreme Point 4: (-300.001, 0) - 在边界外
Extreme Point 5: (300.001, 0) - 在边界外
Extreme Point 6: (0, -200.001) - 在边界外
Extreme Point 7: (0, 200.001) - 在边界外

=== 3. 特殊值测试 ===
Special Point 0: (0, 0) - 在边界内
Special Point 1: (Infinity, 0) - 在边界外
Special Point 2: (-Infinity, 0) - 在边界外
Special Point 3: (NaN, 0) - 在边界外
Special Point 4: (0, NaN) - 在边界外


分析测试结果：

边界点测试结果：


所有边界顶点（四个角点）都正确识别为在边界内
边界线上的点（边的中点）都正确识别为在边界内
刚好超出边界的点都正确识别为在边界外


极限值测试结果：


边界值（-300, 300, -200, 200）被正确处理为在边界内
刚好超出边界的值（比如-300.001）被正确处理为在边界外
测试显示边界检测的精度处理正确


特殊值测试结果：


原点(0,0)正确识别为在边界内
Infinity和-Infinity都被正确识别为在边界外
NaN值都被正确识别为在边界外

建议：

边界值的处理方式是合理的，包含了等于边界值的情况
特殊值处理正确，不会导致系统异常
精度控制合适，能正确区分边界点和超出边界的点

代码可以正常使用，不需要额外修改。是否需要测试其他边界情况？