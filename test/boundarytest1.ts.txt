// 直接实现关键函数用于测试
interface Point {
	x: number;
	y: number;
  }
  
  interface ObjectProperties {
	id: string;
	typeValue: number;
	typeName: string;
	name: string;
	position: Point;
	isLocked: boolean;
	rotation: number;
	length: number;
	width: number;
	mode?: "ceiling" | "wall";
	ceiling?: any;
	wall?: any;
  }
  
  // 获取雷达边界顶点
  function getRadarBoundaryVertices(radar: ObjectProperties) {
	const mode = radar.mode || 'ceiling';
	const modeConfig = mode === 'ceiling' ? radar.ceiling : radar.wall;
	const boundary = modeConfig.boundary;
  
	if (mode === 'ceiling') {
	  return {
		v1: { x: -boundary.leftH, y: -boundary.frontV },  // 左上
		v2: { x: boundary.rightH, y: -boundary.frontV },  // 右上
		v3: { x: -boundary.leftH, y: boundary.rearV },    // 左下
		v4: { x: boundary.rightH, y: boundary.rearV }     // 右下
	  };
	} else {
	  return {
		v1: { x: -boundary.leftH, y: 0 },                // 左上
		v2: { x: boundary.rightH, y: 0 },                // 右上
		v3: { x: -boundary.leftH, y: boundary.frontV },  // 左下
		v4: { x: boundary.rightH, y: boundary.frontV }   // 右下
	  };
	}
  }
  
  // 获取物体的四个顶点
  function getObjectVertices(obj: ObjectProperties): Point[] {
	const { position, length, width, rotation } = obj;
	const rad = (rotation * Math.PI) / 180;
	const halfLength = length / 2;
	const halfWidth = width / 2;
	
	return [
	  // 左上
	  {
		x: position.x - halfLength * Math.cos(rad) + halfWidth * Math.sin(rad),
		y: position.y - halfLength * Math.sin(rad) - halfWidth * Math.cos(rad)
	  },
	  // 右上
	  {
		x: position.x + halfLength * Math.cos(rad) + halfWidth * Math.sin(rad),
		y: position.y + halfLength * Math.sin(rad) - halfWidth * Math.cos(rad)
	  },
	  // 左下
	  {
		x: position.x - halfLength * Math.cos(rad) - halfWidth * Math.sin(rad),
		y: position.y - halfLength * Math.sin(rad) + halfWidth * Math.cos(rad)
	  },
	  // 右下
	  {
		x: position.x + halfLength * Math.cos(rad) - halfWidth * Math.sin(rad),
		y: position.y + halfLength * Math.sin(rad) + halfWidth * Math.cos(rad)
	  }
	];
  }
  
  // 判断点是否在边界内
  function isPointInBoundary(point: Point, radar: ObjectProperties): boolean {
	const mode = radar.mode || 'ceiling';
	const modeConfig = mode === 'ceiling' ? radar.ceiling : radar.wall;
	const boundary = modeConfig.boundary;
	
	const h = point.x;
	const v = point.y;
  
	if (mode === 'ceiling') {
	  return (
		h >= -boundary.leftH && 
		h <= boundary.rightH && 
		v >= -boundary.frontV && 
		v <= boundary.rearV
	  );
	} else {
	  return (
		h >= -boundary.leftH && 
		h <= boundary.rightH && 
		v >= 0 && 
		v <= boundary.frontV
	  );
	}
  }
  
  // 测试场景配置
  const testScene = {
	radar: {
	  id: "radar1",
	  typeValue: 20,
	  typeName: "Radar",
	  name: "TestRadar",
	  position: { x: 0, y: 0 },
	  isLocked: false,
	  rotation: 0,
	  mode: "ceiling",
	  ceiling: {
		height: { min: 150, max: 330, default: 280, step: 10 },
		boundary: { leftH: 300, rightH: 300, frontV: 200, rearV: 200 }
	  },
	  wall: {
		height: { min: 150, max: 330, default: 150, step: 10 },
		boundary: { leftH: 300, rightH: 300, frontV: 400, rearV: 0 }
	  },
	  length: 20,
	  width: 20
	} as ObjectProperties,
	objects: [
	  {
		id: "bed1",
		typeValue: 2,
		typeName: "Bed",
		name: "Bed1",
		position: { x: 100, y: 150 },
		isLocked: false,
		rotation: 0,
		length: 190,
		width: 90
	  },
	  {
		id: "door1",
		typeValue: 4,
		typeName: "Door",
		name: "Door1",
		position: { x: -250, y: 100 },
		isLocked: false,
		rotation: 90,
		length: 90,
		width: 30
	  },
	  {
		id: "wall1",
		typeValue: 1,
		typeName: "Wall",
		name: "Wall1",
		position: { x: 0, y: 200 },
		isLocked: false,
		rotation: 0,
		length: 400,
		width: 5
	  }
	] as ObjectProperties[]
  };
  
  // 执行测试
  console.log('1. Radar Boundary Vertices:', getRadarBoundaryVertices(testScene.radar));
  
  // 测试每个物体的顶点和是否在边界内
  testScene.objects.forEach(obj => {
	console.log(`\n2. Testing ${obj.typeName} ${obj.id}:`);
	
	// 获取物体顶点
	const vertices = getObjectVertices(obj);
	console.log(`Vertices:`, vertices);
	
	// 检查是否有任何顶点在边界内
	const hasVertexInBoundary = vertices.some(vertex => isPointInBoundary(vertex, testScene.radar));
	console.log(`Has vertex in boundary: ${hasVertexInBoundary}`);
	
	// 检查中心点是否在边界内
	const centerInBoundary = isPointInBoundary(obj.position, testScene.radar);
	console.log(`Center point in boundary: ${centerInBoundary}`);
  });


 /*
  #测试结果
  Result

1. Radar Boundary Vertices: {"v1":{"x":-300,"y":-200},"v2":{"x":300,"y":-200},"v3":{"x":-300,"y":200},"v4":{"x":300,"y":200}}

2. Testing Bed bed1:
Vertices: [{"x":5,"y":105},{"x":195,"y":105},{"x":5,"y":195},{"x":195,"y":195}]
Has vertex in boundary: true
Center point in boundary: true

2. Testing Door door1:
Vertices: [{"x":-235,"y":55},{"x":-235,"y":145},{"x":-265,"y":55},{"x":-265,"y":145}]
Has vertex in boundary: true
Center point in boundary: true

2. Testing Wall wall1:
Vertices: [{"x":-200,"y":197.5},{"x":200,"y":197.5},{"x":-200,"y":202.5},{"x":200,"y":202.5}]
Has vertex in boundary: true
Center point in boundary: true

基于测试结果，让我分析一下计算的准确性：

雷达边界计算正确：


Ceiling模式下边界正确生成为：±300(H) × ±200(V)的矩形区域
边界顶点计算准确，形成了一个完整的矩形


物体顶点计算：


床(Bed)：

中心点(100, 150)
四个顶点正确考虑了长度(190)和宽度(90)
顶点计算显示床部分在边界内


门(Door)：

中心点(-250, 100)
90度旋转正确反映在顶点计算中
部分顶点在边界内


墙(Wall)：

中心点(0, 200)
长度400和宽度5正确反映在顶点计算中
位于边界边缘，部分在边界内




边界检测：


所有三个物体都被正确检测到部分在边界内
边界检测同时考虑了物体的中心点和顶点


*/