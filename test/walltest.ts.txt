好的，我来分三次进行测试。

首先测试Wall模式下的边界计算：
View analysisJavascriptExpandCopy// 1. Wall模式边界测试
interface Point { x: number; y: number; }
interface ObjectProperties {
  id: string;
  mode?: "ceiling" | "wall";
  wall?: {
    boundary: {
      leftH: number;
      rightH: number;
      frontV: number;
      rearV: number;
    };
  };
}

function getRadarBoundaryVertices(radar: ObjectProperties) {
  // Wall模式下的边界计算
  const boundary = radar.wall!.boundary;
  return {
    v1: { x: -boundary.leftH, y: 0 },         // 左上
    v2: { x: boundary.rightH, y: 0 },         // 右上
    v3: { x: -boundary.leftH, y: boundary.frontV },  // 左下
    v4: { x: boundary.rightH, y: boundary.frontV }   // 右下
  };
}

function isPointInBoundary(point: Point, radar: ObjectProperties): boolean {
  const boundary = radar.wall!.boundary;
  return (
    point.x >= -boundary.leftH && 
    point.x <= boundary.rightH && 
    point.y >= 0 && 
    point.y <= boundary.frontV
  );
}

// 测试用例
const wallRadar = {
  id: "radar1",
  mode: "wall",
  wall: {
    boundary: {
      leftH: 300,   // 左范围300cm
      rightH: 300,  // 右范围300cm
      frontV: 400,  // 前范围400cm
      rearV: 0      // Wall模式下后范围固定为0
    }
  }
} as ObjectProperties;

// 1. 打印边界顶点
console.log("1. Wall Mode Boundary Vertices:");
const vertices = getRadarBoundaryVertices(wallRadar);
console.log(vertices);

// 2. 测试不同位置的点
const testPoints = [
  { x: 0, y: 0 },      // 原点（上边界）
  { x: 0, y: 400 },    // 前边界中点
  { x: -300, y: 200 }, // 左边界中点
  { x: 300, y: 200 },  // 右边界中点
  { x: -350, y: 200 }, // 超出左边界
  { x: 0, y: 450 },    // 超出前边界
  { x: 0, y: -50 }     // 低于地面
];

// 3. 验证边界检测
console.log("\n2. Boundary Point Tests:");
testPoints.forEach((point, index) => {
  const inBoundary = isPointInBoundary(point, wallRadar);
  console.log(`Point ${index} ${JSON.stringify(point)}: ${inBoundary ? "在边界内" : "在边界外"}`);
});

// 4. 验证特殊情况
console.log("\n3. Special Cases:");
// 正好在边界上的点
const boundaryPoints = [
  { x: -300, y: 0 },   // 左上角
  { x: 300, y: 0 },    // 右上角
  { x: -300, y: 400 }, // 左下角
  { x: 300, y: 400 }   // 右下角
];

boundaryPoints.forEach((point, index) => {
  const inBoundary = isPointInBoundary(point, wallRadar);
  console.log(`Boundary Point ${index} ${JSON.stringify(point)}: ${inBoundary ? "在边界内" : "在边界外"}`);
});


Result

1. Wall Mode Boundary Vertices:
{"v1":{"x":-300,"y":0},"v2":{"x":300,"y":0},"v3":{"x":-300,"y":400},"v4":{"x":300,"y":400}}

2. Boundary Point Tests:
Point 0 {"x":0,"y":0}: 在边界内
Point 1 {"x":0,"y":400}: 在边界内
Point 2 {"x":-300,"y":200}: 在边界内
Point 3 {"x":300,"y":200}: 在边界内
Point 4 {"x":-350,"y":200}: 在边界外
Point 5 {"x":0,"y":450}: 在边界外
Point 6 {"x":0,"y":-50}: 在边界外

3. Special Cases:
Boundary Point 0 {"x":-300,"y":0}: 在边界内
Boundary Point 1 {"x":300,"y":0}: 在边界内
Boundary Point 2 {"x":-300,"y":400}: 在边界内
Boundary Point 3 {"x":300,"y":400}: 在边界内Wall模式边界测试结果显示边界计算和检测都正常工作：

边界顶点计算正确，构成了一个从地面(y=0)向上400cm的矩形区域
边界点检测正确，包括边界上的点都被视为在边界内
超出边界和低于地面的点都被正确识别为在边界外

接下来测试不同旋转角度的物体检测：

