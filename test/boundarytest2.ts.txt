/*
建议：

可以添加一个可视化功能，在RadarCanvas中显示计算出的顶点和边界
对于边界上的物体（如Wall），可能需要特别处理
考虑添加物体重叠检测

需要继续验证的部分：

Wall模式下的边界计算
不同旋转角度的物体检测
边界极限情况的处理

*/
// 扩展测试场景，包含Wall模式和不同旋转角度
const testScenes = {
	// 1. Ceiling模式测试场景
	ceiling: {
	  radar: {
		id: "radar1",
		typeValue: 20,
		typeName: "Radar",
		name: "TestRadar-Ceiling",
		position: { x: 0, y: 0 },
		isLocked: false,
		rotation: 0,
		mode: "ceiling",
		ceiling: {
		  height: { min: 150, max: 330, default: 280, step: 10 },
		  boundary: { leftH: 300, rightH: 300, frontV: 200, rearV: 200 }
		},
		wall: {
		  height: { min: 150, max: 330, default: 150, step: 10 },
		  boundary: { leftH: 300, rightH: 300, frontV: 400, rearV: 0 }
		},
		length: 20,
		width: 20
	  },
	  objects: [
		// 边界中心的床，旋转45度
		{
		  id: "bed1",
		  typeValue: 2,
		  typeName: "Bed",
		  name: "Bed-Center-45",
		  position: { x: 0, y: 0 },
		  isLocked: false,
		  rotation: 45,
		  length: 190,
		  width: 90
		},
		// 边界边缘的床，旋转30度
		{
		  id: "bed2",
		  typeValue: 2,
		  typeName: "Bed",
		  name: "Bed-Edge-30",
		  position: { x: 250, y: 150 },
		  isLocked: false,
		  rotation: 30,
		  length: 190,
		  width: 90
		},
		// 跨边界的门
		{
		  id: "door1",
		  typeValue: 4,
		  typeName: "Door",
		  name: "Door-Cross",
		  position: { x: -290, y: -180 },
		  isLocked: false,
		  rotation: 60,
		  length: 90,
		  width: 30
		}
	  ]
	},
  
	// 2. Wall模式测试场景
	wall: {
	  radar: {
		id: "radar2",
		typeValue: 20,
		typeName: "Radar",
		name: "TestRadar-Wall",
		position: { x: 0, y: 0 },
		isLocked: false,
		rotation: 0,
		mode: "wall",
		ceiling: {
		  height: { min: 150, max: 330, default: 280, step: 10 },
		  boundary: { leftH: 300, rightH: 300, frontV: 200, rearV: 200 }
		},
		wall: {
		  height: { min: 150, max: 330, default: 150, step: 10 },
		  boundary: { leftH: 300, rightH: 300, frontV: 400, rearV: 0 }
		},
		length: 20,
		width: 20
	  },
	  objects: [
		// Wall模式下边界底部的床
		{
		  id: "bed3",
		  typeValue: 2,
		  typeName: "Bed",
		  name: "Bed-Bottom",
		  position: { x: 0, y: 20 },
		  isLocked: false,
		  rotation: 0,
		  length: 190,
		  width: 90
		},
		// Wall模式下边界顶部的床，旋转15度
		{
		  id: "bed4",
		  typeValue: 2,
		  typeName: "Bed",
		  name: "Bed-Top-15",
		  position: { x: 0, y: 380 },
		  isLocked: false,
		  rotation: 15,
		  length: 190,
		  width: 90
		}
	  ]
	}
  };
  
  // 测试函数
  function testScene(scene: any, modeName: string) {
	console.log(`\n=== Testing ${modeName} Mode ===`);
	
	// 1. 验证边界计算
	const boundary = getRadarBoundaryVertices(scene.radar);
	console.log(`\n1. ${modeName} Boundary Vertices:`, boundary);
	
	// 2. 测试每个物体
	scene.objects.forEach(obj => {
	  console.log(`\n2. Testing ${obj.name}:`);
	  
	  // 计算物体顶点
	  const vertices = getObjectVertices(obj);
	  console.log(`Vertices:`, vertices);
	  
	  // 计算每个顶点是否在边界内
	  vertices.forEach((vertex, idx) => {
		const inBoundary = isPointInBoundary(vertex, scene.radar);
		console.log(`Vertex ${idx} in boundary:`, inBoundary);
	  });
	  
	  // 计算中心点是否在边界内
	  const centerInBoundary = isPointInBoundary(obj.position, scene.radar);
	  console.log(`Center point (${obj.position.x}, ${obj.position.y}) in boundary:`, centerInBoundary);
	  
	  // 计算物体与边界的交叉情况
	  const verticesInBoundary = vertices.filter(v => isPointInBoundary(v, scene.radar));
	  console.log(`Vertices in boundary: ${verticesInBoundary.length} of 4`);
	});
  }
  
  // 执行测试
  testScene(testScenes.ceiling, "Ceiling");
  testScene(testScenes.wall, "Wall");
  
  // 额外测试极限情况
  console.log("\n=== Testing Edge Cases ===");
  
  // 1. 测试边界点
  const edgePoints = [
	{ x: -300, y: 0 },    // 左边界
	{ x: 300, y: 0 },     // 右边界
	{ x: 0, y: -200 },    // 上边界(Ceiling模式)
	{ x: 0, y: 200 },     // 下边界(Ceiling模式)
	{ x: 0, y: 400 },     // 下边界(Wall模式)
	{ x: 0, y: 0 }        // Wall模式下的上边界
  ];
  
  console.log("\nTesting boundary points:");
  edgePoints.forEach(point => {
	console.log(`Point (${point.x}, ${point.y}):`,
	  `Ceiling: ${isPointInBoundary(point, testScenes.ceiling.radar)}`,
	  `Wall: ${isPointInBoundary(point, testScenes.wall.radar)}`
	);
  });
  
  // 2. 测试对角线物体
  const diagonalObj = {
	id: "test",
	typeValue: 2,
	typeName: "Bed",
	name: "Diagonal-Test",
	position: { x: 200, y: 150 },
	isLocked: false,
	rotation: 45,  // 45度旋转
	length: 200,
	width: 100
  };
  
  console.log("\nTesting diagonal object vertices:");
  const diagonalVertices = getObjectVertices(diagonalObj);
  console.log("Diagonal vertices:", diagonalVertices);
  diagonalVertices.forEach((vertex, idx) => {
	console.log(`Vertex ${idx}:`,
	  `Ceiling: ${isPointInBoundary(vertex, testScenes.ceiling.radar)}`,
	  `Wall: ${isPointInBoundary(vertex, testScenes.wall.radar)}`
	);
  });

####测试结果
Result


=== Testing Ceiling Mode ===
Error

getRadarBoundaryVertices is not defined

// 类型定义
interface Point {
	x: number;
	y: number;
  }
  
  interface ObjectProperties {
	id: string;
	typeValue: number;
	typeName: string;
	name: string;
	position: Point;
	isLocked: boolean;
	rotation: number;
	length: number;
	width: number;
	mode?: "ceiling" | "wall";
	ceiling?: any;
	wall?: any;
  }
  
  // 计算边界顶点
  function getRadarBoundaryVertices(radar: ObjectProperties) {
	const mode = radar.mode || 'ceiling';
	const modeConfig = mode === 'ceiling' ? radar.ceiling : radar.wall;
	const boundary = modeConfig.boundary;
  
	if (mode === 'ceiling') {
	  return {
		v1: { x: -boundary.leftH, y: -boundary.frontV },  // 左上
		v2: { x: boundary.rightH, y: -boundary.frontV },  // 右上
		v3: { x: -boundary.leftH, y: boundary.rearV },    // 左下
		v4: { x: boundary.rightH, y: boundary.rearV }     // 右下
	  };
	} else {
	  return {
		v1: { x: -boundary.leftH, y: 0 },                // 左上
		v2: { x: boundary.rightH, y: 0 },                // 右上
		v3: { x: -boundary.leftH, y: boundary.frontV },  // 左下
		v4: { x: boundary.rightH, y: boundary.frontV }   // 右下
	  };
	}
  }
  
  // 计算物体顶点
  function getObjectVertices(obj: ObjectProperties): Point[] {
	const { position, length, width, rotation } = obj;
	const rad = (rotation * Math.PI) / 180;
	const halfLength = length / 2;
	const halfWidth = width / 2;
	
	return [
	  // 左上
	  {
		x: position.x - halfLength * Math.cos(rad) + halfWidth * Math.sin(rad),
		y: position.y - halfLength * Math.sin(rad) - halfWidth * Math.cos(rad)
	  },
	  // 右上
	  {
		x: position.x + halfLength * Math.cos(rad) + halfWidth * Math.sin(rad),
		y: position.y + halfLength * Math.sin(rad) - halfWidth * Math.cos(rad)
	  },
	  // 左下
	  {
		x: position.x - halfLength * Math.cos(rad) - halfWidth * Math.sin(rad),
		y: position.y - halfLength * Math.sin(rad) + halfWidth * Math.cos(rad)
	  },
	  // 右下
	  {
		x: position.x + halfLength * Math.cos(rad) - halfWidth * Math.sin(rad),
		y: position.y + halfLength * Math.sin(rad) + halfWidth * Math.cos(rad)
	  }
	];
  }
  
  // 点是否在边界内
  function isPointInBoundary(point: Point, radar: ObjectProperties): boolean {
	const mode = radar.mode || 'ceiling';
	const modeConfig = mode === 'ceiling' ? radar.ceiling : radar.wall;
	const boundary = modeConfig.boundary;
	
	const h = point.x;
	const v = point.y;
  
	if (mode === 'ceiling') {
	  return (
		h >= -boundary.leftH && 
		h <= boundary.rightH && 
		v >= -boundary.frontV && 
		v <= boundary.rearV
	  );
	} else {
	  return (
		h >= -boundary.leftH && 
		h <= boundary.rightH && 
		v >= 0 && 
		v <= boundary.frontV
	  );
	}
  }
  
  // 测试函数
  function formatPoint(point: Point): string {
	return `(${point.x.toFixed(1)}, ${point.y.toFixed(1)})`;
  }
  
  // 测试数据
  const testRadars = {
	ceiling: {
	  id: "radar1",
	  typeValue: 20,
	  typeName: "Radar",
	  name: "Ceiling-Radar",
	  position: { x: 0, y: 0 },
	  rotation: 0,
	  mode: "ceiling",
	  ceiling: {
		boundary: { leftH: 300, rightH: 300, frontV: 200, rearV: 200 }
	  },
	  wall: {
		boundary: { leftH: 300, rightH: 300, frontV: 400, rearV: 0 }
	  },
	  length: 20,
	  width: 20,
	  isLocked: false
	},
	wall: {
	  id: "radar2",
	  typeValue: 20,
	  typeName: "Radar",
	  name: "Wall-Radar",
	  position: { x: 0, y: 0 },
	  rotation: 0,
	  mode: "wall",
	  ceiling: {
		boundary: { leftH: 300, rightH: 300, frontV: 200, rearV: 200 }
	  },
	  wall: {
		boundary: { leftH: 300, rightH: 300, frontV: 400, rearV: 0 }
	  },
	  length: 20,
	  width: 20,
	  isLocked: false
	}
  } as any;
  
  // 测试用例
  const testCases = [
	// 1. 正常位置的物体
	{
	  name: "Centered Bed",
	  position: { x: 0, y: 0 },
	  rotation: 0,
	  length: 190,
	  width: 90
	},
	// 2. 边界附近的物体
	{
	  name: "Edge Bed",
	  position: { x: 280, y: 180 },
	  rotation: 0,
	  length: 190,
	  width: 90
	},
	// 3. 45度旋转的物体
	{
	  name: "Rotated Bed",
	  position: { x: 0, y: 0 },
	  rotation: 45,
	  length: 190,
	  width: 90
	},
	// 4. 跨边界的物体
	{
	  name: "Cross-Boundary Bed",
	  position: { x: 290, y: 190 },
	  rotation: 30,
	  length: 190,
	  width: 90
	}
  ];
  
  // 执行测试
  ["ceiling", "wall"].forEach(mode => {
	console.log(`\n=== Testing ${mode.toUpperCase()} Mode ===`);
	const radar = testRadars[mode];
	
	console.log("\nRadar Boundary:");
	const boundary = getRadarBoundaryVertices(radar);
	Object.entries(boundary).forEach(([key, point]) => {
	  console.log(`${key}: ${formatPoint(point)}`);
	});
	
	testCases.forEach(testCase => {
	  console.log(`\nTesting: ${testCase.name}`);
	  const obj = {
		...testCase,
		id: "test",
		typeValue: 2,
		typeName: "Bed",
		isLocked: false
	  } as ObjectProperties;
	  
	  // 获取并显示顶点
	  const vertices = getObjectVertices(obj);
	  console.log("Vertices:");
	  vertices.forEach((vertex, idx) => {
		const inBoundary = isPointInBoundary(vertex, radar);
		console.log(`  ${idx}: ${

####
			好的，我来分三次进行测试。

			首先测试Wall模式下的边界计算：
			View analysisJavascriptExpandCopy// 1. Wall模式边界测试
			interface Point { x: number; y: number; }
			interface ObjectProperties {
			  id: string;
			  mode?: "ceiling" | "wall";
			  wall?: {
				boundary: {
				  leftH: number;
				  rightH: number;
				  frontV: number;
				  rearV: number;
				};
			  };
			}
			
			function getRadarBoundaryVertices(radar: ObjectProperties) {
			  // Wall模式下的边界计算
			  const boundary = radar.wall!.boundary;
			  return {
				v1: { x: -boundary.leftH, y: 0 },         // 左上
				v2: { x: boundary.rightH, y: 0 },         // 右上
				v3: { x: -boundary.leftH, y: boundary.frontV },  // 左下
				v4: { x: boundary.rightH, y: boundary.frontV }   // 右下
			  };
			}
			
			function isPointInBoundary(point: Point, radar: ObjectProperties): boolean {
			  const boundary = radar.wall!.boundary;
			  return (
				point.x >= -boundary.leftH && 
				point.x <= boundary.rightH && 
				point.y >= 0 && 
				point.y <= boundary.frontV
			  );
			}
			
			// 测试用例
			const wallRadar = {
			  id: "radar1",
			  mode: "wall",
			  wall: {
				boundary: {
				  leftH: 300,   // 左范围300cm
				  rightH: 300,  // 右范围300cm
				  frontV: 400,  // 前范围400cm
				  rearV: 0      // Wall模式下后范围固定为0
				}
			  }
			} as ObjectProperties;
			
			// 1. 打印边界顶点
			console.log("1. Wall Mode Boundary Vertices:");
			const vertices = getRadarBoundaryVertices(wallRadar);
			console.log(vertices);
			
			// 2. 测试不同位置的点
			const testPoints = [
			  { x: 0, y: 0 },      // 原点（上边界）
			  { x: 0, y: 400 },    // 前边界中点
			  { x: -300, y: 200 }, // 左边界中点
			  { x: 300, y: 200 },  // 右边界中点
			  { x: -350, y: 200 }, // 超出左边界
			  { x: 0, y: 450 },    // 超出前边界
			  { x: 0, y: -50 }     // 低于地面
			];
			
			// 3. 验证边界检测
			console.log("\n2. Boundary Point Tests:");
			testPoints.forEach((point, index) => {
			  const inBoundary = isPointInBoundary(point, wallRadar);
			  console.log(`Point ${index} ${JSON.stringify(point)}: ${inBoundary ? "在边界内" : "在边界外"}`);
			});
			
			// 4. 验证特殊情况
			console.log("\n3. Special Cases:");
			// 正好在边界上的点
			const boundaryPoints = [
			  { x: -300, y: 0 },   // 左上角
			  { x: 300, y: 0 },    // 右上角
			  { x: -300, y: 400 }, // 左下角
			  { x: 300, y: 400 }   // 右下角
			];
			
			boundaryPoints.forEach((point, index) => {
			  const inBoundary = isPointInBoundary(point, wallRadar);
			  console.log(`Boundary Point ${index} ${JSON.stringify(point)}: ${inBoundary ? "在边界内" : "在边界外"}`);
			});
			Result
			
			1. Wall Mode Boundary Vertices:
			{"v1":{"x":-300,"y":0},"v2":{"x":300,"y":0},"v3":{"x":-300,"y":400},"v4":{"x":300,"y":400}}
			
			2. Boundary Point Tests:
			Point 0 {"x":0,"y":0}: 在边界内
			Point 1 {"x":0,"y":400}: 在边界内
			Point 2 {"x":-300,"y":200}: 在边界内
			Point 3 {"x":300,"y":200}: 在边界内
			Point 4 {"x":-350,"y":200}: 在边界外
			Point 5 {"x":0,"y":450}: 在边界外
			Point 6 {"x":0,"y":-50}: 在边界外
			
			3. Special Cases:
			Boundary Point 0 {"x":-300,"y":0}: 在边界内
			Boundary Point 1 {"x":300,"y":0}: 在边界内
			Boundary Point 2 {"x":-300,"y":400}: 在边界内
			Boundary Point 3 {"x":300,"y":400}: 在边界内Wall模式边界测试结果显示边界计算和检测都正常工作：
			
			边界顶点计算正确，构成了一个从地面(y=0)向上400cm的矩形区域
			边界点检测正确，包括边界上的点都被视为在边界内
			超出边界和低于地面的点都被正确识别为在边界外
			
			接下来测试不同旋转角度的物体检测：

